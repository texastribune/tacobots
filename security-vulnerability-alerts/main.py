import os
import json
import logging
logging.basicConfig(level=logging.DEBUG)

import requests
import functions_framework
from slack import WebClient
from slack.errors import SlackApiError
from datetime import date

from flask import Flask
app = Flask(__name__)

from dotenv import load_dotenv
load_dotenv()

@functions_framework.http
@app.route('/', methods=['POST'])
def main(request): 
    payload = request.get_json()

    severity = payload['alert']['security_advisory']['severity']
    if severity == "medium" or severity == "low" or payload["action"] != "created":
        return
    
    print(create_record_airtable(payload))
    return_status = write_slack_message(payload)
    return return_status 

def write_slack_message(payload): 
    slack_token = os.getenv('SLACK_API_TOKEN')
    client = WebClient(token=slack_token)
    return_status = "Incomplete"

    severity = payload['alert']['security_advisory']['severity']
    description = " "
    if payload['alert']['security_advisory']['summary'] != None:
        description = payload['alert']['security_advisory']['summary']
    
    try:
        response = client.chat_postMessage(
                channel="#tech-test",
                blocks=[
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": ":rotating_light: " + severity.title() + " level security alert on " + payload["repository"]["full_name"]
                    },
                    "accessory": {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "text": "View Alert!"
                            # "emoji": true
                        },
                        "value": "click_me_123",
                        "url": payload['alert']['html_url'],
                        "action_id": "button-action"
                    }
                },
                {
                    "type": "context",
                    "elements": [
                        {
                            "type": "mrkdwn",
                            "text": description + " - " + payload["sender"]["login"]
                        }
                    ]
                }
                ]
            )
        return_status = "Complete"
    except SlackApiError as e:
    # You will get a SlackApiError if "ok" is False
            assert e.response["error"]  # str like 'invalid_auth', 'channel_not_found'
    return return_status

def create_record_airtable(payload):
    AIRTABLE_TOKEN = os.getenv('AIRTABLE_TOKEN')
    AIRTABLE_BASE_ID = os.getenv('AIRTABLE_BASE_ID')
    AIRTABLE_URL = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}"

    today = date.today()
    current_date = today.strftime("%m/%d/%y")


    alert_url = payload['alert']['html_url']
    pr_url = payload['alert']['html_url'] + "/pulls" + str(payload['alert']['number'])
    task = payload['alert']['security_advisory']['summary']
    summary = "Vulnerability: " + alert_url + "\n\nRelated PR: " + pr_url + "\n\nWhat to test after upgrading: "  + "\n\nDate: " + current_date
    notes = payload['alert']['security_advisory']['description']

    data = {
        "records": [
            {
        "fields": {
        "Task": task,
        "Summary": summary,
        "Status": "Todo",
        "Notes": notes,
        "Project": [
            "reckipR9m0M37Wx8b"
        ],
        "Type": [
            "Security"
        ]
        }
    },
        ]
    }

    url = f"{AIRTABLE_URL}/table1"
    headers = {
      'Authorization': f'Bearer {AIRTABLE_TOKEN}',
      'Content-Type': 'application/json'
    }

    response = requests.request("POST", url, headers=headers, data=json.dumps(data))
    return response 
